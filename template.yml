AWSTemplateFormatVersion: 2010-09-09
Description: VPC and Subnet Create
Parameters:
  KeyForBastion:
    Description: SSH KeyPair to access to the bastion server
    ConstraintDescription: SSH KeyPair to access to the bastion server
    Type: AWS::EC2::KeyPair::KeyName
    Default: bastion-of-development-environment
  KeyForDevelopment:
    Description: SSH KeyPair to access to the bastion server
    ConstraintDescription: SSH KeyPair to access to the bastion server
    Type: AWS::EC2::KeyPair::KeyName
    Default: development-environment
  AvailabilityZone:
    Description: The availability zone this service uses
    ConstraintDescription: The availability zone this service uses
    Type: AWS::EC2::AvailabilityZone::Name
    Default: ap-northeast-1d
Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.1.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      InstanceTenancy: default
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Metadata:
      AWS::CloudFormation::Designer:
        id: 58838feb-f0e1-4810-9d4b-b7e31f47858b
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
    Metadata:
      AWS::CloudFormation::Designer:
        id: f83aa6eb-e2ac-48f5-bd28-15cb89c9d677
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: Public
  PublicRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
      RouteTableId: !Ref PublicRouteTable
      Tags:
        Key: Name
        Name: Public
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: 10.1.10.0/24
      MapPublicIpOnLaunch: true
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: Public
    Metadata:
      AWS::CloudFormation::Designer:
        id: 09d90cb1-3ad5-4537-9ee5-5c376404cdd1
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
      Tags:
        Key: Name
        Name: Public
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: Private
  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      InstanceId: !Ref DevelopmentServer
      RouteTableId: !Ref PrivateRouteTable
      Tags:
        Key: Name
        Name: Private
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      CidrBlock: 10.1.20.0/24
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: Private
  BastionServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t3.nano
      ImageId: ami-09b68f5653871885f
      KeyName: !Ref KeyForBastion
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref BastionServerSecurityGroup
      Tags:
        Key: Name
        Name: BastionServer
  BastionServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For bastoin server
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: BastionServer
  DevelopmentServer:
    Type: AWS::EC2::Instance
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      InstanceType: t3.2xlarge
      ImageId: ami-09b68f5653871885f
      KeyName: !Ref KeyForDevelopment
      SubnetId: !Ref PrivateSubnet
      SecurityGroupIds:
        - !Ref DevelopmentServerSecurityGroup
      Tags:
        Key: Name
        Name: DevelopmentServer
  DevelopmentServerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: For development server
      SecurityGroupIngress:
        - IpProtocol: icmp
          FromPort: -1
          ToPort: -1
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      VpcId: !Ref VPC
      Tags:
        Key: Name
        Name: DevelopmentServer
  VolumeForDevelopmentServer:
    Type: AWS::EC2::Volume
    Properties:
      # It cannot be empty
      AvailabilityZone: !Ref AvailabilityZone
      Size: 20
      VolumeType: gp2
      Tags:
        Key: Name
        Name: DevelopmentServer
  VolumeAttachmentForDevelopmentServer:
    Type: AWS::EC2::VolumeAttachment
    Properties:
      Device: /dev/sdf
      InstanceId: !Ref DevelopmentServer
      VolumeId:
        Ref: VolumeForDevelopmentServer
      Tags:
        Key: Name
        Name: DevelopmentServer
  EC2Stopper:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: ec2-stopper
      Handler: stop-ec2.handler
      Runtime: nodejs10.x
      Role: !GetAtt LambdaExecutionRole.Arn
      Timeout: 10
      Code: lambda/stop-ec2.js
  EC2StopperScheduler:
    Type: AWS::Events::Rule
    Properties:
      Description: ’schedule event for lambda’
      ScheduleExpression: "cron(1 1 * ? * *)"
      State: ENABLED
      Targets:
        - Arn: !GetAtt EC2Stopper.Arn
          Id: ScheduleEvent1Target
  LambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref EC2Stopper
      Principal: events.amazonaws.com
      SourceArn: !GetAtt EC2StopperScheduler.Arn
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: "/"
      # Policies:
      #   - PolicyName: lambdatest
      #     PolicyDocument:
      #       Version: "2012-10-17"
      #       Statement:
      #         - Effect: Allow
      #           Action:
      #             - "cloudformation:DescribeStackEvents"
      #             - "ec2:TerminateInstances"
      #           Resource: arn:aws:*:*:*:*
  IAMRoleForEC2Stopper:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: EC2Terminater
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Action:
              - "ec2:TerminateInstances"
              - "ec2:DescribeInstances"
            Resource: "*"

      # Path: "/"
      Roles:
        - !Ref LambdaExecutionRole
